generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  email                 String                 @unique
  phone                 String?                @unique
  passwordHash          String
  name                  String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  avatar String?
  categories            Category[]
  accountMembers        AccountMember[]
  accounts              Account[]
  eventMembers          EventParticipant[]
  createdEvents         Event[]                @relation("CreatedEvents")
  goalMembers           GoalMember[]
  goals                 Goal[]
  notifications         Notification[]
  recurringTransactions RecurringTransaction[]
  transactions          Transaction[]
  contactOf             UserContact[]          @relation("ContactOf")
  contacts              UserContact[]          @relation("UserContacts")

  @@map("users")
}

model UserContact {
  id            String   @id @default(uuid())
  userId        String
  contactUserId String
  contactName   String?
  createdAt     DateTime @default(now())
  status        String   @default("pending")
  contactUser   User     @relation("ContactOf", fields: [contactUserId], references: [id])
  user          User     @relation("UserContacts", fields: [userId], references: [id])

  @@map("user_contacts")
  @@index([userId, contactUserId])
}

model Account {
  id                   String                 @id @default(uuid())
  userId               String
  name                 String
  type                 String                 @default("personal")
  balance              Decimal
  currency             String
  initialBalance       Decimal
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  isActive             Boolean                @default(true)
  members              AccountMember[]
  user                 User                   @relation(fields: [userId], references: [id])
  events               Event[]
  Goal                 Goal[]
  RecurringTransaction RecurringTransaction[]
  transactions         Transaction[]

  @@map("accounts")
}

model AccountMember {
  id        String   @id @default(uuid())
  accountId String
  userId    String
  role      String   @default("member")
  joinedAt  DateTime @default(now())
  invitedBy String?
  account   Account  @relation(fields: [accountId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("account_members")
}

model Category {
  id                   String                 @id @default(uuid())
  userId               String?
  name                 String
  type                 String
  parentId             String?
  icon                 String?
  color                String?
  isSystem             Boolean                @default(false)
  cashbackPercentage   Decimal?
  parent               Category?              @relation("CategoryChildren", fields: [parentId], references: [id])
  children             Category[]             @relation("CategoryChildren")
  user                 User?                  @relation(fields: [userId], references: [id])
  RecurringTransaction RecurringTransaction[]
  transactions         Transaction[]
}

model Transaction {
  id                   String                @id @default(uuid())
  accountId            String
  userId               String
  categoryId           String
  amount               Decimal
  currency             String
  convertedAmount      Decimal?
  date                 DateTime              @default(now())
  description          String?
  type                 String
  status               String                @default("completed")
  recurringId          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  location             String?
  receiptImage         String?
  tags                 String[]
  account              Account               @relation(fields: [accountId], references: [id])
  category             Category              @relation(fields: [categoryId], references: [id])
  recurringTransaction RecurringTransaction? @relation(fields: [recurringId], references: [id])
  user                 User                  @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Goal {
  id                 String       @id @default(uuid())
  userId             String
  name               String
  targetAmount       Decimal
  currentAmount      Decimal      @default(0)
  currency           String
  targetDate         DateTime?
  autoSavePercentage Decimal?
  autoSaveAccountId  String?
  category           String?
  isShared           Boolean      @default(false)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  icon               String?
  color              String?
  members            GoalMember[]
  autoSaveAccount    Account?     @relation(fields: [autoSaveAccountId], references: [id])
  user               User         @relation(fields: [userId], references: [id])

  @@map("goals")
}

model GoalMember {
  id                String   @id @default(uuid())
  goalId            String
  userId            String
  contributedAmount Decimal  @default(0)
  joinedAt          DateTime @default(now())
  status            String   @default("active")
  goal              Goal     @relation(fields: [goalId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@map("goal_members")
}

model Event {
  id          String         @id @default(uuid())
  title       String
  totalAmount Int
  deadline    DateTime
  participants EventParticipant[]
  createdAt   DateTime       @default(now())

  User User[] @relation("CreatedEvents")

  Account Account[]
}

model EventParticipant {
  id        String   @id @default(uuid())
  eventId   String
  userId    String
  amount    Int
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Currency {
  code          String   @id
  name          String
  symbol        String
  rateToDefault Decimal
  updatedAt     DateTime @updatedAt

  @@map("currencies")
}

model RecurringTransaction {
  id             String        @id @default(uuid())
  userId         String
  accountId      String
  categoryId     String
  amount         Decimal
  description    String?
  type           String
  frequency      String
  startDate      DateTime
  endDate        DateTime?
  nextOccurrence DateTime
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  account        Account       @relation(fields: [accountId], references: [id])
  category       Category      @relation(fields: [categoryId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  transactions   Transaction[]

  @@map("recurring_transactions")
}

model Notification {
  id                String   @id @default(uuid())
  userId            String
  title             String
  message           String
  type              String
  isRead            Boolean  @default(false)
  relatedEntityType String?
  relatedEntityId   String?
  createdAt         DateTime @default(now())
  actionUrl         String?
  user              User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}
