generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  email                 String                 @unique
  phone                 String?                @unique
  passwordHash          String
  name                  String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  avatar                String?
  categories            Category[]
  accounts              Account[]
  eventMembers          EventParticipant[]
  createdEvents         Event[]                @relation("CreatedEvents")
  goalMembers           GoalMember[]
  goals                 Goal[]
  transactions          Transaction[]
  contactOf             UserContact[]          @relation("ContactOf")
  contacts              UserContact[]          @relation("UserContacts")

  @@map("users")
}

model UserContact {
  id            String   @id @default(uuid())
  userId        String
  contactUserId String
  contactName   String?
  createdAt     DateTime @default(now())
  status        String   @default("pending")
  contactUser   User     @relation("ContactOf", fields: [contactUserId], references: [id])
  user          User     @relation("UserContacts", fields: [userId], references: [id])

  @@map("user_contacts")
  @@index([userId, contactUserId])
}

model Account {
  id                    String                  @id @default(uuid())
  name                  String
  balance               Decimal                 @default(0)
  currency              String
  description           String?
  userId                String
  user                  User                    @relation(fields: [userId], references: [id])
  cashbackCategories    String[]
  transactions          Transaction[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  goalsWithAutoSave     Goal[]

  @@map("accounts")
}

model Category {
  id                    String                 @id @default(uuid())
  name                  String
  icon                  String?
  color                 String?
  type                  String
  userId                String?
  user                  User?                  @relation(fields: [userId], references: [id])
  transactions          Transaction[]
  createdAt             DateTime               @default(now())

  @@map("categories")
}


model Transaction {
  id          String    @id @default(uuid())
  title       String
  sum         Decimal
  type        String    // 'income' | 'expense'
  date        DateTime  @default(now())


  accountId   String
  account     Account   @relation(fields: [accountId], references: [id])


  userId      String
  user        User      @relation(fields: [userId], references: [id])


  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])

  @@map("transactions")
}

model Goal {
  id                 String       @id @default(uuid())
  userId             String
  name               String
  targetAmount       Decimal
  currentAmount      Decimal      @default(0)
  currency           String
  targetDate         DateTime?
  autoSavePercentage Decimal?
  autoSaveAccountId  String?
  category           String?
  isShared           Boolean      @default(false)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  icon               String?
  color              String?
  members            GoalMember[]
  autoSaveAccount    Account?     @relation(fields: [autoSaveAccountId], references: [id])
  user               User         @relation(fields: [userId], references: [id])

  @@map("goals")
}

model GoalMember {
  id                String   @id @default(uuid())
  goalId            String
  userId            String
  contributedAmount Decimal  @default(0)
  joinedAt          DateTime @default(now())
  status            String   @default("active")
  goal              Goal     @relation(fields: [goalId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@map("goal_members")
}

enum EventStatus {
  Pending
  Completed
}

model Event {
  id          String             @id @default(uuid())
  title       String
  totalAmount Int
  deadline    DateTime
  creatorId   String
  creator     User               @relation("CreatedEvents", fields: [creatorId], references: [id])
  members     EventParticipant[]
  createdAt   DateTime           @default(now())
  status      EventStatus        @default(Pending)

  @@map("events")
}

model EventParticipant {
  id        String   @id @default(uuid())
  eventId   String
  userId    String
  amount    Int
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("event_participants")
}


model Currency {
  code          String   @id
  name          String
  symbol        String
  rateToDefault Decimal
  updatedAt     DateTime @updatedAt

  @@map("currencies")
}
